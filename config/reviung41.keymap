/* EDITED
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
};
&led_strip {
    chain-length = <11>;
};
/ {
    combos {
        compatible = "zmk,combos";

        combo_prntscrn {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <25 26 27>;
        };

        caps_toggle {
            bindings = <&kt CAPSLOCK>;
            key-positions = <11 10>;
        };

        gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <36 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
            //                         | ALT | LWR | SPC | RSE  | ALT |

            bindings = <
&kp ESCAPE                       &kp Q  &kp W  &kp E         &kp R         &kp T               &kp Y  &kp U                &kp I        &kp O    &kp P     &mt RIGHT_BRACKET LEFT_BRACKET
&kp TAB                          &kp A  &kp S  &kp D         &kp F         &kp G               &kp H  &kp J                &kp K        &kp L    &kp SEMI  &kp SQT
&mt LEFT_SHIFT LEFT_PARENTHESIS  &kp Z  &kp X  &kp C         &kp V         &kp B               &kp N  &kp M                &kp COMMA    &kp DOT  &kp FSLH  &mt RSHFT RIGHT_PARENTHESIS
                                               &kp LEFT_ALT  &kp LEFT_GUI         &lt 3 SPACE         &lt 1 RIGHT_CONTROL  &lt 2 ENTER
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------
            // |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      DEL    |
            // |    |  _  |  +  |  {  |  }  | "|" |   | LFT | DWN |  UP | RGT |  `  |       ~     |
            // |    | ESC | GUI | ALT | CAPS|  "  |   | HOME| END | PGUP| PGDN| PRSC| SHFT(SPACE) |
            //                       |     |     | RET | ADJ |     |

            bindings = <
&kp GRAVE  &kp NUMBER_1    &kp NUMBER_2      &kp NUMBER_3   &kp NUMBER_4  &kp N5           &kp NUMBER_6   &kp N7            &kp N8             &kp N9        &kp N0     &mt LEFT_BRACKET RIGHT_BRACKET
&kp ENTER  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_GUI   &kp LEFT_ALT  &kp TAB          &kp BACKSPACE  &kp LEFT_ARROW    &kp DOWN_ARROW     &kp UP_ARROW  &kp RIGHT  &kp ENTER
&trans     &trans          &kp K_BACK        &kp K_FORWARD  &kp GRAVE     &trans           &kp DELETE     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL     &kp MINUS  &kp ASTRK
                                             &trans         &trans                 &trans                 &trans            &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &trans          &trans            &kp F3            &trans        &kp KP_DIVIDE             &kp ASTRK  &kp N7  &kp N8  &kp N9  &kp KP_DIVIDE  &kp C_VOL_UP
&trans  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_COMMAND  &kp LEFT_ALT  &trans                    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp EQUAL      &kp C_VOLUME_DOWN
&trans  &trans          &kp K_BACK        &kp K_FORWARD     &trans        &trans                    &kp PLUS   &kp N1  &kp N2  &kp N3  &kp N0         &kp ENTER
                                          &trans            &trans                       &kp EQUAL             &trans  &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RGB BRI+ | RGB SAT+ | RGB HUE+ | RGB ANI+ |    | RGB TOG |   |  BT1  | BT2 | BT3 | BT4 | BT5 | BT CLR |
            // | RGB BRI- | RGB SAT- | RGB HUE- | RGB ANI- |    |         |   |       |     |     |     |     |        |
            // |          |          |          |          |    |         |   | RESET |     |     |     |     |        |
            //                                              |     |     |     |     |     |

            bindings = <
&rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_EFF  &to 4   &rgb_ug RGB_TOG          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_EFR  &none   &bl BL_TOG               &none         &none         &none         &none         &none         &none
&none            &none            &none            &none            &none   &none                    &sys_reset    &bootloader   &none         &none         &none         &none
                                                   &trans           &trans                   &trans                &trans        &trans
            >;
        };

        game_layer {
            bindings = <
&kp ESC  &kp TAB    &kp Q  &kp W  &kp E  &kp R             &none  &none  &none  &none  &none  &to 0
&none    &kp LSHFT  &kp A  &kp S  &kp D  &kp G             &kp F  &none  &none  &none  &none  &none
&none    &kp LCTRL  &kp Z  &kp X  &kp C  &kp B             &kp V  &none  &none  &none  &none  &none
                           &mo 5  &kp C         &kp SPACE         &none  &none
            >;
        };

        game_lower {
            bindings = <
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans          &trans          &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adgust {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
